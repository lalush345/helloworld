trigger:
- master

pool:
  name: 'Default'  
  demands:
    - agent.name -equals agentTest 


steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.400'  

- script: |
    dotnet restore
    dotnet build --configuration Release
    dotnet pack --configuration Release --output $(Build.ArtifactStagingDirectory)
  displayName: 'Restore, Build and Pack .NET Project'

- script: |
    currentVersion=$(cat version.txt)
    echo "Current Version: $currentVersion"

    # Split the version into an array
    IFS='.' read -r -a versionParts <<< "$currentVersion"

    # Increment the patch version (last part)
    patchVersion=${versionParts[2]}
    patchVersion=$((patchVersion + 1))

    # Construct the new version
    newVersion="${versionParts[0]}.${versionParts[1]}.$patchVersion"
    echo "New Version: $newVersion"

    # Optionally, you can write the new version back to the version file
    echo $newVersion > $(Build.SourcesDirectory)/version.txt

  displayName: 'Increment Version and Print'

- script: |
    git config --global user.email "lalush345@gmail.com"
    git config --global user.name "lalush345"
    git add $(Build.SourcesDirectory)/version.txt
    git commit -m "Increment version to $newVersion"
    git push origin HEAD:master

  displayName: 'Commit Version Change'
  # env:
  #   GIT_CREDENTIALS: $(System.AccessToken)  # Ensure you have this set up

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'drop'
    publishLocation: 'pipeline'
  displayName: 'Publish Artifact to Pipeline'

- task: UniversalPackages@0
  displayName: Publish a Universal Package
  inputs:
    command: publish
    publishDirectory: '$(Build.ArtifactStagingDirectory)'
    vstsFeedPublish: 'hello_world/test'
    vstsFeedPackagePublish: 'helloworld'
    packagePublishDescription: 'hello world app'

